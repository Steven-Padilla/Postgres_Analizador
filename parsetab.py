
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA CREATE_DATABASE CREATE_TABLE DATA_TYPE DELETE EQUAL IDENTIFIER INSERT INTEGER LPAREN RPAREN SEMICOLON SET STRING UPDATE VALUES WHERE\n    query : create_database SEMICOLON\n          | create_table SEMICOLON\n          | insert SEMICOLON\n          | delete SEMICOLON\n          | update SEMICOLON\n    \n    create_database : CREATE_DATABASE IDENTIFIER\n    \n    create_table : CREATE_TABLE IDENTIFIER LPAREN columns RPAREN\n    \n    columns : column_def COMMA columns\n            | column_def\n    \n    column_def : IDENTIFIER DATA_TYPE\n    \n    insert : INSERT IDENTIFIER LPAREN identifiers RPAREN VALUES LPAREN values RPAREN\n    \n    identifiers : IDENTIFIER COMMA identifiers\n                | IDENTIFIER\n    \n    values : value COMMA values\n           | value\n    \n    value : INTEGER\n          | STRING\n    \n    delete : DELETE IDENTIFIER WHERE IDENTIFIER EQUAL value\n    \n    update : UPDATE IDENTIFIER SET IDENTIFIER EQUAL value WHERE IDENTIFIER EQUAL value\n    '
    
_lr_action_items = {'CREATE_DATABASE':([0,],[7,]),'CREATE_TABLE':([0,],[8,]),'INSERT':([0,],[9,]),'DELETE':([0,],[10,]),'UPDATE':([0,],[11,]),'$end':([1,12,13,14,15,16,],[0,-1,-2,-3,-4,-5,]),'SEMICOLON':([2,3,4,5,6,17,34,43,44,45,52,56,],[12,13,14,15,16,-6,-7,-18,-16,-17,-11,-19,]),'IDENTIFIER':([7,8,9,10,11,22,23,24,25,35,36,48,],[17,18,19,20,21,26,29,31,32,26,29,51,]),'LPAREN':([18,19,42,],[22,23,47,]),'WHERE':([20,44,45,46,],[24,-16,-17,48,]),'SET':([21,],[25,]),'DATA_TYPE':([26,],[33,]),'RPAREN':([27,28,29,30,33,40,41,44,45,49,50,55,],[34,-9,-13,37,-10,-8,-12,-16,-17,52,-15,-14,]),'COMMA':([28,29,33,44,45,50,],[35,36,-10,-16,-17,53,]),'EQUAL':([31,32,51,],[38,39,54,]),'VALUES':([37,],[42,]),'INTEGER':([38,39,47,53,54,],[44,44,44,44,44,]),'STRING':([38,39,47,53,54,],[45,45,45,45,45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'query':([0,],[1,]),'create_database':([0,],[2,]),'create_table':([0,],[3,]),'insert':([0,],[4,]),'delete':([0,],[5,]),'update':([0,],[6,]),'columns':([22,35,],[27,40,]),'column_def':([22,35,],[28,28,]),'identifiers':([23,36,],[30,41,]),'value':([38,39,47,53,54,],[43,46,50,50,56,]),'values':([47,53,],[49,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> query","S'",1,None,None,None),
  ('query -> create_database SEMICOLON','query',2,'p_query','sintactico.py',7),
  ('query -> create_table SEMICOLON','query',2,'p_query','sintactico.py',8),
  ('query -> insert SEMICOLON','query',2,'p_query','sintactico.py',9),
  ('query -> delete SEMICOLON','query',2,'p_query','sintactico.py',10),
  ('query -> update SEMICOLON','query',2,'p_query','sintactico.py',11),
  ('create_database -> CREATE_DATABASE IDENTIFIER','create_database',2,'p_create_database','sintactico.py',16),
  ('create_table -> CREATE_TABLE IDENTIFIER LPAREN columns RPAREN','create_table',5,'p_create_table','sintactico.py',21),
  ('columns -> column_def COMMA columns','columns',3,'p_columns','sintactico.py',26),
  ('columns -> column_def','columns',1,'p_columns','sintactico.py',27),
  ('column_def -> IDENTIFIER DATA_TYPE','column_def',2,'p_column_def','sintactico.py',32),
  ('insert -> INSERT IDENTIFIER LPAREN identifiers RPAREN VALUES LPAREN values RPAREN','insert',9,'p_insert','sintactico.py',37),
  ('identifiers -> IDENTIFIER COMMA identifiers','identifiers',3,'p_identifiers','sintactico.py',42),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','sintactico.py',43),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',48),
  ('values -> value','values',1,'p_values','sintactico.py',49),
  ('value -> INTEGER','value',1,'p_value','sintactico.py',54),
  ('value -> STRING','value',1,'p_value','sintactico.py',55),
  ('delete -> DELETE IDENTIFIER WHERE IDENTIFIER EQUAL value','delete',6,'p_delete','sintactico.py',60),
  ('update -> UPDATE IDENTIFIER SET IDENTIFIER EQUAL value WHERE IDENTIFIER EQUAL value','update',10,'p_update','sintactico.py',65),
]
